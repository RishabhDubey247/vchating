doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Video Chat
    style.
      #video-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-gap: 10px;
      }
      video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

  body
    h1 Video Chat
    #video-grid
    button#leave-call-button Leave Call
    script(src="https://code.jquery.com/jquery-1.6.2.min.js")
    script(src="/socket.io/socket.io.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.3.1/peerjs.min.js")
    script.
      const ROOM_ID = "#{room}";
      const videoGrid = document.getElementById('video-grid');
      const myPeer = new Peer();
      let myStream;

      const myVideo = document.createElement('video');
      myVideo.muted = true;

      navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true
      }).then(stream => {
          myStream = stream;
          addVideoStream(myVideo, stream);

          myPeer.on('call', call => {
              call.answer(stream);
              const video = document.createElement('video');
              call.on('stream', userVideoStream => {
                  addVideoStream(video, userVideoStream);
              });
          });

          const socket = io();
          socket.on('connect', () => {
              console.log("Connected to server");
              socket.emit('join-room', ROOM_ID, myPeer.id);
          });

          socket.on('user-connected', userId => {
              console.log("User connected: " + userId);
              connectToNewUser(userId, stream);
          });

          socket.on('connect-to-user', otherUserId => {
              console.log("Connecting to user:", otherUserId);
              // Establish a connection with the other user
              const call = myPeer.call(otherUserId, stream);
              const video = document.createElement('video');
              call.on('stream', userVideoStream => {
                  addVideoStream(video, userVideoStream);
              });
          });
      }).catch(error => {
          console.error('Error accessing media devices:', error);
      });

      myPeer.on('open', id => {
          console.log("Peer ID:", id);
      });

      function connectToNewUser(userId, stream) {
          console.log("Calling new user:", userId);
          const call = myPeer.call(userId, stream);
          const video = document.createElement('video');
          call.on('stream', userVideoStream => {
              addVideoStream(video, userVideoStream);
          });
          call.on('close', () => {
              video.remove();
          });
      }

      function addVideoStream(video, stream) {
          video.srcObject = stream;
          video.addEventListener('loadedmetadata', () => {
              video.play();
          });
          videoGrid.appendChild(video);
      }

      // Function to handle leaving the call
      document.getElementById('leave-call-button').addEventListener('click', () => {
          myStream.getTracks().forEach(track => track.stop()); // Stop all tracks in the stream
          window.location.href = '/leave-chat'; // Redirect to the homepage or any other desired location
      });
