doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css", integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO", crossorigin="anonymous")
    title Video Chat
    style.
      * {
        margin : 0 ;
        padding : 0 ;
      }
      body {
        font-family: Arial, sans-serif;
        background-color: #f8f8f8;
        max-height : 100vh;
      }

      h1 {
        text-align: center;
      }

      #video-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* Display only two columns */
        grid-gap: 10px;
        justify-content: center;
        align-items: center;
        margin: 20px auto;
        width: 750px; 
      }

      .video-container {
        position: relative;
      }

      .video-container video {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      #chatting-section {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-top: 20px;
        height: 650px;
      }

      #chatting-section .messages-container {
        height: calc(100% - 50px); /* Adjusted height */
        overflow-y: auto;
        margin-bottom: 10px;
      }

      #chatting-section .input-container {
        display: flex;
        align-items: flex-end; /* Align items at the bottom */
      }

      #chatting-section .input-container input[type="text"] {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        outline: none;
      }

      #chatting-section .input-container button {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-left: 10px;
        font-size: 12px;
        outline: none;
      }

      #chatting-section .input-container button:hover {
        background-color: #0056b3;
      }

      #mute-button {
        isplay: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      #mute-button:hover {
        background-color: #c82333;
      }

      #leave-call-button {
        display: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      #leave-call-button:hover {
        background-color: #c82333;
      }
      #hide-video-button {
        display: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: Tomato;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
      #hide-video-button:hover {
         background-color: #c82333;
      }
  body
    div.main(style="background: linear-gradient(to right, #A46262, #7E6EAA,brown); padding-top: 15px; padding-bottom: 15px")
      h1 Hello Guysss
      .container
        .row
          .col-md-4
            #video-grid
              // Video Grid Blocks
            div.d-flex
              button#mute-button Mute
              button#hide-video-button Hide Video
              button#leave-call-button Leave Call
          .col-md-8
            #chatting-section
              .messages-container#chat-messages
                // Messages will be displayed here
              .input-container
                input.form-control(type="text", name="chatting-input", id="chatting-input", placeholder="Type your message...")
                span
                  button.btn.btn-secondary(type="button", id="send-message", onclick="sendMessage()") Send

    script(src="https://code.jquery.com/jquery-1.6.2.min.js")
    script(src="/socket.io/socket.io.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.3.1/peerjs.min.js")
    script.
      const ROOM_ID = "#{joiningRoom}";
      const videoGrid = document.getElementById('video-grid');
      const myPeer = new Peer();
      let myStream;
      const myVideo = document.createElement('video');
      myVideo.muted = true;
      var socket; 
      
      navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true
      }).then(stream => {
          myStream = stream;
          addVideoStream(myVideo, stream);

          myPeer.on('call', call => {
              call.answer(stream);
              const video = document.createElement('video');
              call.on('stream', userVideoStream => {
                  addVideoStream(video, userVideoStream);
              });
              call.on('close', () => {
                  removeVideoContainer(video.parentElement);
              });

          });

          socket = io()

          socket.on('connect', () => {
              socket.emit('join-room', myPeer.id);
          });

          socket.on('user-connected', data => {
              console.log(data);
              console.log("User connected: " + data.userId);
              connectToNewUser(data.userId, stream);
          });

          socket.on('connect-to-user', otherUserId => {
              console.log("Connecting to user:", otherUserId);
              // Establish a connection with the other user
              const call = myPeer.call(otherUserId, stream);
              const video = document.createElement('video');
              call.on('stream', userVideoStream => {
                  addVideoStream(video, userVideoStream);
              });
              call.on('close', () => {
                  removeVideoContainer(video.parentElement);
              });
          });
      }).catch(error => {
          console.error('Error accessing media devices:', error);
      });

      myPeer.on('open', id => {
          console.log("Peer ID:", id);
      });

      function connectToNewUser(userId, stream) {
        console.log("Calling new user:", userId);
        const call = myPeer.call(userId, stream);
        const video = document.createElement('video');
        call.on('stream', userVideoStream => {
            addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
            removeVideoContainer(video.parentElement);
        });
      }

      function addVideoStream(video, stream) {
          video.srcObject = stream;
          video.addEventListener('loadedmetadata', () => {
              video.play();
          });
          const videoContainer = document.createElement('div');
          videoContainer.classList.add('video-container');
          videoContainer.appendChild(video);
          videoGrid.appendChild(videoContainer);
      }

      function removeVideoContainer(container) {
        console.log(container)
          if (container) {
              container.remove();
          }
      }

      function sendMessage(){
        const message = document.getElementById('chatting-input')
        const inputvalue = message.value;
        console.log(inputvalue);
        socket.emit('chat message', inputvalue);
        message.value = '';
      }

      // Mute button functionality
      document.getElementById('mute-button').addEventListener('click', () => {
        const tracks = myStream.getAudioTracks();
        tracks.forEach(track => {
          track.enabled = !track.enabled;
        });
        const muteButton = document.getElementById('mute-button');
        muteButton.textContent = muteButton.textContent === 'Mute' ? 'Unmute' : 'Mute';
      });

      // Hide video button functionality
      document.getElementById('hide-video-button').addEventListener('click', () => {
        const tracks = myStream.getVideoTracks();
        tracks.forEach(track => {
          track.enabled = !track.enabled;
        });
        const hideVideoButton = document.getElementById('hide-video-button');
        hideVideoButton.textContent = hideVideoButton.textContent === 'Hide Video' ? 'Show Video' : 'Hide Video';
      });

      // Function to handle leaving the call
      document.getElementById('leave-call-button').addEventListener('click', () => {
          myStream.getTracks().forEach(track => track.stop()); // Stop all tracks in the stream
          window.location.href = '/leave-chat'; // Redirect to the homepage or any other desired location
      });
