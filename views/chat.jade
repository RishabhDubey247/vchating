doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    
  body
    //- Make our video grid
    h1 i am here 
    #video-grid
    script(src="https://code.jquery.com/jquery-1.6.2.min.js")
    script(src="/socket.io/socket.io.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.3.1/peerjs.min.js")
    script.
      const ROOM_ID = "#{roomId}";
      const videoGrid = document.getElementById('video-grid');
        console.log(videoGrid)
      const myPeer = new Peer();
      const myVideo = document.createElement('video');
      myVideo.muted = true;

      var socket = io()
        console.log("working")
        socket.on('connect', function(data) {
            socket.send('Hello.');
            socket.on('message', function (msg) {
                socket.send('This is where I send data?');
            });
        });
      
      navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true
      }).then(stream => {
          addVideoStream(myVideo, stream);

          myPeer.on('call', call => {
              call.answer(stream);
              const video = document.createElement('recive-video');
              call.on('stream', userVideoStream => {
                  addVideoStream(video, userVideoStream);
              });
          });

          socket.on('user-connected', userId => {
              connectToNewUser(userId, stream);
          });
      });

      myPeer.on('open', id => {
          socket.emit('join-room', ROOM_ID, id);
      });

      function connectToNewUser(userId, stream) {
          const call = myPeer.call(userId, stream);
          const video = document.createElement('video');
          call.on('stream', userVideoStream => {
              addVideoStream(video, userVideoStream);
          });
          call.on('close', () => {
              video.remove();
          });
      }

      function addVideoStream(video, stream) {
          video.srcObject = stream;
          video.addEventListener('loadedmetadata', () => {
              video.play();
          });
          videoGrid.appendChild(video);
      }
    //- Make a grid of 300x300 videos
    style.
      #video-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, 300px);
        grid-auto-rows: 300px;
      }
      video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
